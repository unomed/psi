
import { supabase } from "@/integrations/supabase/client";
import { toast } from "sonner";

const defaultTemplates = [
  {
    name: "Convite",
    subject: "Convite para Avalia√ß√£o Psicossocial - {employeeName}",
    body: `Prezado(a) {employeeName},

Voc√™ foi convidado(a) a participar de uma avalia√ß√£o psicossocial como parte do programa de sa√∫de e bem-estar da empresa.

üîó **Link para a avalia√ß√£o:** {linkUrl}

**Informa√ß√µes importantes:**
‚Ä¢ A avalia√ß√£o √© confidencial e os dados ser√£o tratados de acordo com a LGPD
‚Ä¢ Tempo estimado: 15-20 minutos
‚Ä¢ Prazo para conclus√£o: {dataLimite}
‚Ä¢ Em caso de d√∫vidas, entre em contato com o RH

Sua participa√ß√£o √© fundamental para promovermos um ambiente de trabalho mais saud√°vel e produtivo.

Atenciosamente,
Equipe de Recursos Humanos`,
    variables: {
      description: "Template de convite para participar de avalia√ß√£o psicossocial"
    }
  },
  {
    name: "Lembrete",
    subject: "Lembrete: Avalia√ß√£o Psicossocial Pendente - {employeeName}",
    body: `Prezado(a) {employeeName},

Este √© um lembrete amig√°vel sobre sua avalia√ß√£o psicossocial que ainda n√£o foi conclu√≠da.

üîó **Link para a avalia√ß√£o:** {linkUrl}

**Detalhes:**
‚Ä¢ Prazo limite: {dataLimite}
‚Ä¢ Tempo estimado: 15-20 minutos
‚Ä¢ Sua participa√ß√£o √© muito importante

Caso tenha d√∫vidas ou dificuldades t√©cnicas, entre em contato conosco.

Atenciosamente,
Equipe de Recursos Humanos`,
    variables: {
      description: "Template de lembrete para avalia√ß√µes pendentes"
    }
  },
  {
    name: "Conclus√£o",
    subject: "Avalia√ß√£o Psicossocial Conclu√≠da - Obrigado!",
    body: `Prezado(a) {employeeName},

Agradecemos por ter conclu√≠do sua avalia√ß√£o psicossocial!

Sua participa√ß√£o √© fundamental para melhorarmos continuamente o ambiente de trabalho e promover a sa√∫de mental de todos os colaboradores.

**Pr√≥ximos passos:**
‚Ä¢ Os resultados ser√£o analisados de forma confidencial
‚Ä¢ A√ß√µes de melhoria ser√£o implementadas conforme necess√°rio
‚Ä¢ Voc√™ receber√° feedback sobre as iniciativas implementadas

Em caso de d√∫vidas, nossa equipe est√° √† disposi√ß√£o.

Atenciosamente,
Equipe de Recursos Humanos`,
    variables: {
      description: "Template de confirma√ß√£o de conclus√£o da avalia√ß√£o"
    }
  }
];

export async function createDefaultEmailTemplates() {
  try {
    console.log("Criando templates padr√£o de email...");

    for (const template of defaultTemplates) {
      // Primeiro, limpar templates duplicados mantendo apenas o mais recente
      const { data: allTemplates, error: getAllError } = await supabase
        .from('email_templates')
        .select('id, created_at')
        .eq('name', template.name)
        .order('created_at', { ascending: false });

      if (getAllError) {
        console.error(`Erro ao buscar templates ${template.name}:`, getAllError);
        continue;
      }

      // Se h√° m√∫ltiplos templates, deletar os antigos
      if (allTemplates && allTemplates.length > 1) {
        console.log(`Removendo ${allTemplates.length - 1} templates duplicados para ${template.name}`);
        const templateIdsToDelete = allTemplates.slice(1).map(t => t.id);
        
        const { error: deleteError } = await supabase
          .from('email_templates')
          .delete()
          .in('id', templateIdsToDelete);

        if (deleteError) {
          console.error(`Erro ao deletar templates duplicados ${template.name}:`, deleteError);
        }
      }

      // Verificar se ainda existe pelo menos um template (usando maybeSingle para evitar erro)
      const { data: existing, error: checkError } = await supabase
        .from('email_templates')
        .select('id')
        .eq('name', template.name)
        .maybeSingle();

      if (checkError) {
        console.error(`Erro ao verificar template ${template.name}:`, checkError);
        continue;
      }

      if (existing) {
        console.log(`Template ${template.name} j√° existe, pulando...`);
        continue;
      }

      // Criar template
      const { error: insertError } = await supabase
        .from('email_templates')
        .insert({
          name: template.name,
          subject: template.subject,
          body: template.body,
          variables: template.variables,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        });

      if (insertError) {
        console.error(`Erro ao criar template ${template.name}:`, insertError);
        toast.error(`Erro ao criar template ${template.name}`);
      } else {
        console.log(`Template ${template.name} criado com sucesso`);
      }
    }

    toast.success("Templates de email configurados com sucesso!");
    return true;
  } catch (error) {
    console.error("Erro ao criar templates padr√£o:", error);
    toast.error("Erro ao configurar templates de email");
    return false;
  }
}
