import React, { useState } from "react";
import { ChecklistHeader } from "@/components/checklists/ChecklistHeader";
import { ChecklistTabs } from "@/components/checklists/ChecklistTabs";
import { ChecklistDialogs } from "@/components/checklists/ChecklistDialogs";
import { ChecklistTemplate, ChecklistResult } from "@/types";
import { useChecklistData } from "@/hooks/useChecklistData";
import { useChecklistOperations } from "@/hooks/checklist/useChecklistTemplates";

export default function Checklists() {
  const [activeTab, setActiveTab] = useState("templates");
  const [isFormDialogOpen, setIsFormDialogOpen] = useState(false);
  const [isAssessmentDialogOpen, setIsAssessmentDialogOpen] = useState(false);
  const [isResultDialogOpen, setIsResultDialogOpen] = useState(false);
  const [selectedTemplate, setSelectedTemplate] = useState<ChecklistTemplate | null>(null);
  const [selectedResult, setSelectedResult] = useState<ChecklistResult | null>(null);
  const [isEditing, setIsEditing] = useState(false);

  const { checklists, results, scheduledAssessments, refetchChecklists, refetchScheduled } = useChecklistData();
  const { createTemplate, updateTemplate, deleteTemplate, isDeleting } = useChecklistOperations();

  const handleCreateTemplate = () => {
    setSelectedTemplate(null);
    setIsEditing(false);
    setIsFormDialogOpen(true);
  };

  const handleEditTemplate = (template: ChecklistTemplate) => {
    setSelectedTemplate(template);
    setIsEditing(true);
    setIsFormDialogOpen(true);
  };

  const handleDeleteTemplate = async (template: ChecklistTemplate) => {
    if (window.confirm(`Tem certeza que deseja excluir o template "${template.title}"?`)) {
      await deleteTemplate(template.id);
      refetchChecklists();
    }
  };

  const handleCopyTemplate = (template: ChecklistTemplate) => {
    const copiedTemplate = {
      ...template,
      title: `CÃ³pia de ${template.title}`,
      id: ''  // Will be generated by backend
    };
    setSelectedTemplate(copiedTemplate);
    setIsEditing(false);
    setIsFormDialogOpen(true);
  };

  const handleStartAssessment = (template: ChecklistTemplate) => {
    setSelectedTemplate(template);
    setIsAssessmentDialogOpen(true);
  };

  const handleViewResult = (result: ChecklistResult) => {
    setSelectedResult(result);
    setIsResultDialogOpen(true);
  };

  const handleSubmitTemplate = async (data: Omit<ChecklistTemplate, "id" | "createdAt"> | ChecklistTemplate) => {
    if (isEditing && selectedTemplate) {
      await updateTemplate({ ...data, id: selectedTemplate.id } as ChecklistTemplate);
    } else {
      await createTemplate(data as Omit<ChecklistTemplate, "id" | "createdAt">);
    }
    setIsFormDialogOpen(false);
    refetchChecklists();
  };

  const handleSubmitAssessment = (data: any) => {
    console.log('Assessment submitted:', data);
    setIsAssessmentDialogOpen(false);
  };

  const handleSendEmail = async (assessmentId: string) => {
    console.log('Sending email for assessment:', assessmentId);
  };

  return (
    <div className="container mx-auto py-6 space-y-6">
      <ChecklistHeader onCreateTemplate={handleCreateTemplate} />
      
      <ChecklistTabs
        activeTab={activeTab}
        setActiveTab={setActiveTab}
        checklists={checklists}
        results={results}
        scheduledAssessments={scheduledAssessments}
        onEditTemplate={handleEditTemplate}
        onDeleteTemplate={handleDeleteTemplate}
        onCopyTemplate={handleCopyTemplate}
        onStartAssessment={handleStartAssessment}
        onViewResult={handleViewResult}
        onCreateTemplate={handleCreateTemplate}
        onSendEmail={handleSendEmail}
        onRefreshScheduled={refetchScheduled}
        isDeleting={isDeleting}
      />

      <ChecklistDialogs
        isFormDialogOpen={isFormDialogOpen}
        setIsFormDialogOpen={setIsFormDialogOpen}
        isAssessmentDialogOpen={isAssessmentDialogOpen}
        setIsAssessmentDialogOpen={setIsAssessmentDialogOpen}
        isResultDialogOpen={isResultDialogOpen}
        setIsResultDialogOpen={setIsResultDialogOpen}
        selectedTemplate={selectedTemplate}
        selectedResult={selectedResult}
        onSubmitTemplate={handleSubmitTemplate}
        onSubmitAssessment={handleSubmitAssessment}
        onCloseAssessment={() => setIsAssessmentDialogOpen(false)}
        onCloseResult={() => setIsResultDialogOpen(false)}
        isEditing={isEditing}
      />
    </div>
  );
}
